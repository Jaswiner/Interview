<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on 面试题</title>
    <link>https://jaswine.com/interview/docs/</link>
    <description>Recent content in Docs on 面试题</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 May 2019 10:44:39 +0800</lastBuildDate>
    
	<atom:link href="https://jaswine.com/interview/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nginx</title>
      <link>https://jaswine.com/interview/docs/server/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/server/nginx/</guid>
      <description> Nginx面试题 理论 使用反向代理服务器的优点是什么？
- 隐藏真正的服务器，安全  原理 Nginx是怎么处理HTTP请求的？
- Nginx使用反应器模式  Nginx负载均衡算法是怎么实现的？
- 轮询 - 权重 - 对ip进行hash取模  应用 </description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://jaswine.com/interview/docs/server/tomcat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/server/tomcat/</guid>
      <description> Nginx面试题 理论 使用反向代理服务器的优点是什么？
- 隐藏真正的服务器，安全  原理 Nginx是怎么处理HTTP请求的？
- Nginx使用反应器模式  Nginx负载均衡算法是怎么实现的？
- 轮询 - 权重 - 对ip进行hash取模  应用 </description>
    </item>
    
    <item>
      <title>分布式系统</title>
      <link>https://jaswine.com/interview/docs/arch/distributed/</link>
      <pubDate>Sat, 04 May 2019 10:44:39 +0800</pubDate>
      
      <guid>https://jaswine.com/interview/docs/arch/distributed/</guid>
      <description>分布式面试题 基础 说说你对分布式一致性和CAP,BASE一致性协议的理解
分布式数据库 分布式集群下怎么做到唯一序列号
分布式锁有哪些实现方式？(3)
分布式事务的原理，优缺点，如何使用分布式事务，2pc，3pc的区别，解决了哪些问题</description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>https://jaswine.com/interview/docs/arch/zookeeper/</link>
      <pubDate>Sat, 04 May 2019 10:41:12 +0800</pubDate>
      
      <guid>https://jaswine.com/interview/docs/arch/zookeeper/</guid>
      <description> ZooKeeper面试题 基础 如何使用zookeeper实现分布式锁？有什么区别优缺点，会有什么问题，分别适用什么场景(可以说说redlock的算法实现) 什么是paxos算法，什么是zab协议 </description>
    </item>
    
    <item>
      <title>架构</title>
      <link>https://jaswine.com/interview/docs/arch/arch/</link>
      <pubDate>Mon, 29 Apr 2019 09:50:32 +0800</pubDate>
      
      <guid>https://jaswine.com/interview/docs/arch/arch/</guid>
      <description> 架构设计面试题 高并发 高可用 可伸缩 安全性 如果有人恶意创建非法链接，怎么解决
扩展性 敏捷性 综合 设计一个秒杀系统，30分钟没付款就自动关闭交易 如何设计建立和保持100W的长连接 一个在线文档，文档可以被编辑，如何方式多人同时对一份文档和进行编辑更新 </description>
    </item>
    
    <item>
      <title>缓存</title>
      <link>https://jaswine.com/interview/docs/arch/cache/</link>
      <pubDate>Mon, 29 Apr 2019 09:34:04 +0800</pubDate>
      
      <guid>https://jaswine.com/interview/docs/arch/cache/</guid>
      <description> 缓存面试题 如何防止缓存击穿和雪崩 </description>
    </item>
    
    <item>
      <title>搜索引擎</title>
      <link>https://jaswine.com/interview/docs/search/search/</link>
      <pubDate>Mon, 29 Apr 2019 09:33:55 +0800</pubDate>
      
      <guid>https://jaswine.com/interview/docs/search/search/</guid>
      <description> 搜索引擎面试题 Elasticsearch 说说你们公司使用的es集群架构，索引数据大小，分片有多少，怎么调优的 es的倒排索引是什么？ es是怎么实现master选举的 </description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://jaswine.com/interview/docs/model/model/</link>
      <pubDate>Mon, 29 Apr 2019 09:33:29 +0800</pubDate>
      
      <guid>https://jaswine.com/interview/docs/model/model/</guid>
      <description> 设计模式面试题 创建型 工厂模式 建造者模式 单例模式 写出三种单例模式实现 结构型 适配器模式 桥接模式 装饰者模式 外观模式 享元模式 代理模式 行为型 命令模式 中介者模式 观察者模式 状态模式 策略模式 MVC 说说你对MVC模式的理解，你用过什么MVC框架 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/0menu/</guid>
      <description> 数据结构&amp;amp;算法  线性数据结构  数组 链表 栈 队列 Hash 跳表  树形数据结构  二叉树 红黑树 B+树 Trie树  图
 排序算法
 快速排序 冒泡排序 基数排序 堆排序  查找算法
 二分查找 深度优先遍历 广度优先遍历  高级算法
 贪心算法 分治算法 回溯算法 动态规划算法   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/line/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/line/array/</guid>
      <description> 数组面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  数组面试题  数组动态扩容是怎么实现的?时间复杂度和空间复杂度分别为多少？   数组动态扩容是怎么实现的?时间复杂度和空间复杂度分别为多少？ ## 实现过程 - 新建一个空数组(比原来的大) - 将原数组的元素拷贝到新数组中 ## 时间复杂度 ## 空间复杂度  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/line/hash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/line/hash/</guid>
      <description> Hash面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  Hash面试题  说说你知道的几种hash算法 在10亿个数字中找到最小的10个 有一亿个其中有两个是重复的，快速找到它，要求空间和时间最优 2亿个随机生成的无序整数中找出中间大小的 解决hash冲突都有什么办法？并简单说下实现原理是什么样的？之间的区别是什么？   说说你知道的几种hash算法 在10亿个数字中找到最小的10个 有一亿个其中有两个是重复的，快速找到它，要求空间和时间最优 2亿个随机生成的无序整数中找出中间大小的 解决hash冲突都有什么办法？并简单说下实现原理是什么样的？之间的区别是什么？    名称 原理 区别     开放寻址法 计算出对应的散列值之后如果冲突了就向下继续寻找到空位，如果没有就从表的头开始寻找 数据量小，装载因子小的时候选择开放寻址法   链表法 hash表中存放的元素就是一个链表，当hash值相同的时候就插入到链表的对应位置上 大数据量，大对象的散列表选择链表法，更加的灵活，可以使用红黑树来替代链表    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/line/linked_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/line/linked_list/</guid>
      <description> 链表面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  链表面试题  怎么使用链表实现LRU算法呢？时间和空间复杂度？   怎么使用链表实现LRU算法呢？时间和空间复杂度？ ## 实现过程 - 1.当链表为空的时候 - 1.1.当前id为head - 2.链表不为空的时候 - 2.1.搜索插叙的id - 2.1.1.链表中有该id，将该id为head - 2.1.2.链表中没有该id - 2.1.2.1.链表满了，删除tail元素，id放在head - 2.1.2.2.链表未满，id放在head ## 时间复杂度 ## 空间复杂度  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/line/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/line/queue/</guid>
      <description> 队列面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  队列面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/line/skip_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/line/skip_list/</guid>
      <description> 跳表面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  跳表面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/line/stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/line/stack/</guid>
      <description> 栈面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  栈面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/tree/b&#43;/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/tree/b&#43;/</guid>
      <description> B+树面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  B+树面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/tree/binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/tree/binary/</guid>
      <description> 二叉树面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  二叉树面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/algo/tree/rb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/algo/tree/rb/</guid>
      <description> 红黑树面试题  ⬅️BACK-&amp;lt;数据结构与算法&amp;gt;面试题目录
  红黑树面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/compile/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/compile/0menu/</guid>
      <description> 编译原理  编译原理  词法/语法分析器  HTTP    词法/语法分析器 HTTP </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/computer/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/computer/0menu/</guid>
      <description> 计算机组成  计算机底层是由各种硬件组成的，认识这些硬件以及他们背后的工作原理方便我们理解程序运行的原理
  计算机组成  CPU(运算器/控制器) 存储器 IO 数据链路层  ARP    CPU(运算器/控制器) 存储器 IO 数据链路层 ARP </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/0menu/</guid>
      <description> 计算机网络协议  计算机网络协议  应用层  HTTP HTTPS HTTP2 DNS DHCP RTSP RTMP  传输层  TCP UDP RTP  网络层  IP  数据链路层  ARP    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/application/dhcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/application/dhcp/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/application/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/application/dns/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/application/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/application/http/</guid>
      <description> HTTP  HTTP  HTTP中GET和POST的区别和数据包格式   HTTP中GET和POST的区别和数据包格式 # 从设计角度来说 - GET请求是幂等的，请求前后不会对数据造成变化 - POST是向服务端提交数据，提交数据就是为了修改相关数据，所以不是幂等的 # 从应用角度来说 - GET的请求有长度限制，URL最大长度为2048byte - POST请求没有长度限制 # 从浏览器角度来说 - GET请求回退和刷新不会产生危害 - POST会重新提交请求 - GET可以被缓存 - POST不能被缓存  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/application/http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/application/http2/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/application/https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/application/https/</guid>
      <description> HTTPS  HTTPS  HTTPS加密方式是什么？讲讲整个加密和解密的流程   HTTPS加密方式是什么？讲讲整个加密和解密的流程 HTTP和HTTPS三次握手有什么区别 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/application/rtmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/application/rtmp/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/application/rtsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/application/rtsp/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/hard/arp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/hard/arp/</guid>
      <description> TCP网络协议面试题  关于TCP的详细可以看这里 🔗TCP-计算机网络协议
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/network/ip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/network/ip/</guid>
      <description> TCP网络协议面试题  关于TCP的详细可以看这里 🔗TCP-计算机网络协议
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/transport/rtp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/transport/rtp/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/transport/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/transport/tcp/</guid>
      <description> TCP网络协议面试题  关于TCP的详细可以看这里 🔗TCP-计算机网络协议
  TCP网络协议面试题  TCP三次握手和四次握手的流程，为什么断开连接要四次，如果握手只有两次会出现什么 TCP中KeepAlive作用是什么？是怎么实现的？怎么使用？ 什么是TCP粘包？怎么解决？   TCP三次握手和四次握手的流程，为什么断开连接要四次，如果握手只有两次会出现什么 # 三次握手 - 1.客户端发送SYN=1的包和seq=x的版本好信息，进入SYN_SEND状态 - 2.服务端发回确认包SYN=1，ACK=1，将自己的ISN序列号放到seq=y中，同时发送ACKnum=x+1，服务端进入SYN_RCVD状态 - 3.客户端收到包，SYN=0，ACK=1，ACKnum=y+1，客户端进入到ESTABLISHED阶段 # 四次挥手 - 1.客户端发送FIN=1，seq=x数据到服务端，进入FIN_WAIT_1状态 - 2.服务端收到包，发送ACK=1，ACKnum=x+1，服务端进入CLOSE_WAIT状态，客户端接收到包进入到FIN_WAIT_2状态 - 3.服务端发送FIN=1，seq=y给客户端，进入到LAST_ACK，等待客户端的ACK - 4.客户端接收到服务端的关闭请求，发送一个ACK并等待服务端确认，最后进入到CLOSED状态 # 两次握手弊端 - 不能确认第二次握手的有效性 - 三次握手可以保证C/S两端的存活状态  TCP中KeepAlive作用是什么？是怎么实现的？怎么使用？ 什么是TCP粘包？怎么解决？ </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/net/transport/udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/net/transport/udp/</guid>
      <description> TCP网络协议面试题  关于TCP的详细可以看这里 🔗TCP-计算机网络协议
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/os/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/os/0menu/</guid>
      <description> 计算机操作系统(Linux)  计算机的底层是硬件(cpu、内存&amp;hellip;)，操作系统就是管理和控制这些硬件的软件，同时给开发人员开发一些API来控制底层硬件工作
  计算机操作系统(Linux)  进程管理  进程  内存管理 文件系统   进程管理 进程 内存管理 文件系统 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/base/os/process/process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/base/os/process/process/</guid>
      <description> 进程面试题 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/db/mysql/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/db/mysql/0menu/</guid>
      <description> MySQL面试题  MySQL面试题  索引 事务 锁 日志 解决方案   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/db/mysql/lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/db/mysql/lock/</guid>
      <description> MySQL锁  MySQL锁  什么是乐观锁和悲观锁   ##什么是乐观锁和悲观锁
# 乐观锁 - 不认为操作会冲突 - 使用 # 悲观锁 - 认为每一次操作都会引发冲突  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/db/mysql/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/db/mysql/log/</guid>
      <description> MySQL日志面试题 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/db/mysql/solution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/db/mysql/solution/</guid>
      <description> MySQL常见解决方案  MySQL常见解决方案  数据库中的超级大表如何优化? 你们是怎么排查故障的? 主从数据库延迟的原因是什么？怎么解决？ 怎么防止对数据的误删操作？ 你怎么设计高性能的数据存储架构? 慢查询怎么排查出来和优化？ 读写分离怎么做？有什么好处？ 怎么做数据库的性能分析？ 分库分表怎么做的？都有什么优缺点？ 对于数据库优化你有什么系统的想法或者方案吗？软硬件都可以 MySQL的主从实时备份同步的配置，原理是什么？ 高并发下，怎么做到安全的修改同一行数据 分表后之后想让一个id多个表是自增的，如何效率实现 分表之后分布式唯一id怎么实现，都有什么优缺点   数据库中的超级大表如何优化? 你们是怎么排查故障的? 主从数据库延迟的原因是什么？怎么解决？ 怎么防止对数据的误删操作？ 你怎么设计高性能的数据存储架构? 慢查询怎么排查出来和优化？ 读写分离怎么做？有什么好处？ 怎么做数据库的性能分析？ 分库分表怎么做的？都有什么优缺点？ 对于数据库优化你有什么系统的想法或者方案吗？软硬件都可以 # 数据库查询速度影响因素 - SQL查询速度 - 服务器硬件 - 网卡流量  MySQL的主从实时备份同步的配置，原理是什么？ # 基于SQL的复制 - 主库上执行什么语句，从库上执行对应的语句 # 基于行的复制 - 将修改的内容复制过去 # 混合模式 - 使用SQl和行混合的模式 # 原理 - 在每个事务更新数据完成之前，master在二进制日志记录这些改变。写入二进制日志完成后，master通知存储引擎提交事务。 - Slave将master的binary log复制到其中继日志。首先slave开始一个工作线程（I/O），I/O线程在master上打开一个普通的连接，然后开始binlog dump process。binlog dump process从master的二进制日志中读取事件，如果已经跟上master，它会睡眠并等待master产生新的事件，I/O线程将这些事件写入中继日志。 - Sql slave thread（sql从线程）处理该过程的最后一步，sql线程从中继日志读取事件，并重放其中的事件而更新slave数据，使其与master中的数据一致，只要该线程与I/O线程保持一致，中继日志通常会位于os缓存中，所以中继日志的开销很小  高并发下，怎么做到安全的修改同一行数据 - 使用悲观锁 -  分表后之后想让一个id多个表是自增的，如何效率实现 # 建一个id表 - id表中id是自增的，别的表插入的时候从这个表中取最新的id # Redis生成方案 # 队列方案 - 将批量的id放到队列中，每一次插入取队列中的，失败返还  分表之后分布式唯一id怎么实现，都有什么优缺点     优点 缺点     UUID 全球唯一，本机生成 无序，字符串存储查询效率慢，存储空间大   雪花算法 生成快，id是整体变大的，灵活 依赖本机的时钟，如果时钟回调可能会有重复id   Redis原子性自增 有序 占用带宽    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/db/mysql/sy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/db/mysql/sy/</guid>
      <description> MySQL中的索引  MySQL中的索引  MySQL索引的底层原理是什么？ 如何进行索引优化？ MySQL的索引都有哪些类型，他们的特点是什么，底层的数据结构是什么 说说你对数据库索引的理解，你在项目开发中是如何使用索引的，使用索引一定可以提高查询的性能吗？   MySQL索引的底层原理是什么？ 如何进行索引优化？ MySQL的索引都有哪些类型，他们的特点是什么，底层的数据结构是什么    索引名 特点 数据结构     UNIQUE(唯一索引) 不可以出现相同的值，可以有null    INDEX(普通索引) 允许出现相同的索引内容    PROMARY KEY(主键索引) 不允许出现相同的值    FULLTEXT INDEX(全文索引) 对全文进行索引，效率很差    组合索引 实质上是将多个字段建到一个索引里，列值的组合必须唯一     CREATE INDEX 方式只能创建‘普通索引’和‘唯一索引’ 组合索引的创建方式为： ALTER TABLE [table_name] ADD INDEX [inedx_name](列1,列2,列3);  说说你对数据库索引的理解，你在项目开发中是如何使用索引的，使用索引一定可以提高查询的性能吗？ # 索引理解 - MySQL索引的本质是B+树 # 如何使用 - 不同索引类型添加方式不一样，不过都是雷同的 alter table [table_name] add [index_type] [index_name] [字段名] # 不能，要正确的建立索引 # Tips：索引建立的几大原则 - 最左前缀匹配原则，MySQL一直向右匹配知道遇到查询范围(&amp;gt;,&amp;lt;,between,like)停止匹配 - in和=可以乱序 - 选择区分度比较高的列作为索引 - 索引列不参加计算 - 尽量扩展索引，不新建索引  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/db/mysql/trans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/db/mysql/trans/</guid>
      <description> MySQL事务  MySQL事务  MySQL事务 数据库事务隔离级别有哪些？各自含义是什么？MySQL的默认事务隔离级别是什么？   MySQL事务 数据库事务隔离级别有哪些？各自含义是什么？MySQL的默认事务隔离级别是什么？ # 事务隔离级别 - read-uncommitted(读未提交)：未提交的事务修改可以被看到 - read—committed(读提交)：事务提交修改后可以被另一个事务看到 - repeatable-read(可重复复)：事务内部每次读都是一样的 - serializable(串行化)：一个事务未提交，别的事务就不能修改关联的数据 # 默认隔离级别 - repeatable-read(可重复复)  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/db/sql/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/db/sql/0menu/</guid>
      <description> SQL面试题  SQL面试题  批量往mysql导入1000万数据有什么方法   批量往mysql导入1000万数据有什么方法 - 批量插入多条 - 修改MySQL的参数 (方向：减少IO次数,SQL优化)  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/devops/docker/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/devops/docker/0menu/</guid>
      <description> Docker面试题  Docker面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/devops/jenkins/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/devops/jenkins/0menu/</guid>
      <description> Jenkins面试题  Jmeter面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/devops/kubernetes/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/devops/kubernetes/0menu/</guid>
      <description> Kubernetes面试题  Kubernetes面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/devops/theory/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/devops/theory/0menu/</guid>
      <description> DevOps理论面试题  DevOps理论面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/ee/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/ee/0menu/</guid>
      <description> Java EE知识点  Java EE知识点  Servlet JDBC JTA JTS   Servlet JDBC JTA JTS </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/0menu/</guid>
      <description> Java知识分类  Java知识分类  基础  运算符 Object类 String系  新特性  Java5新特性 Java6新特性 Java7新特性 Java8新特性  Lambda Stream DateTime API Optional  Java9新特性 Java10新特性 Java11新特性 Java12新特性  面向对象思想  抽象 继承 封装 多态  I/O  BIO NIO AIO  集合  Java集合基础面试题 List  ArrayList LinkedList Vector CopyOnWriteArrayList  Set  HashSet LinkedHashSet SortedSet TreeSet  Queue Map  Hashmap LinkedHashMap TreeMap ConcurrentHashmap   多线程/并发  烂大街的多线程基础题 线程池 JUC 锁 多线程案例  异常 高级特性  反射 注解 泛型    基础 运算符 Object类 String系 新特性 Java5新特性 Java6新特性 Java7新特性 Java8新特性 Lambda Stream DateTime API Optional Java9新特性 Java10新特性 Java11新特性 Java12新特性 面向对象思想 抽象 继承 封装 多态 I/O BIO NIO AIO 集合 Java集合基础面试题 List ArrayList LinkedList Vector CopyOnWriteArrayList Set HashSet LinkedHashSet SortedSet TreeSet Queue Map Hashmap LinkedHashMap TreeMap ConcurrentHashmap 多线程/并发 烂大街的多线程基础题 线程池 JUC 锁 多线程案例 异常 高级特性 反射 注解 泛型 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/adv/annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/adv/annotation/</guid>
      <description> Java注解面试题  ⬅️BACK-Java面试题目录
  Java注解面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/adv/generic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/adv/generic/</guid>
      <description> Java泛型面试题  ⬅️BACK-Java面试题目录
  Java泛型面试题  JDK1.5引入了泛型，泛型的存在是用来解决什么问题   JDK1.5引入了泛型，泛型的存在是用来解决什么问题 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/adv/reflect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/adv/reflect/</guid>
      <description> Java反射面试题  ⬅️BACK-Java面试题目录
  Java反射面试题  反射的原理是什么？反射创建类实例的三种方式是什么？ 动态代理有哪些实现方式，你知道他们相应的优缺点吗？   反射的原理是什么？反射创建类实例的三种方式是什么？  动态代理有哪些实现方式，你知道他们相应的优缺点吗？ # 实现方式 - JDK动态代理 - cglib动态代理 # 优缺点 如下      JDK cglib     区别 只能对实现同一接口的类进行代理 可以对任何类惊醒代理，但是不能对final修饰的类进行代理   原理 使用Java反射原理实现的 使用asm的开源工具将代理的类加载进来实现其子类，然后重写相关的方法    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/base/keyword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/base/keyword/</guid>
      <description> Java中的关键字  ⬅️BACK-Java面试题目录
  Java中的关键字  Java中try&amp;hellip;catch&amp;hellip;finally&amp;hellip;return执行的先后顺序 final有什么用途？ static关键字这么用   Java中try&amp;hellip;catch&amp;hellip;finally&amp;hellip;return执行的先后顺序 - 先执行try中的代码，遇到try中的return执行但是不返回到main方法中  final有什么用途？ - final表示不变，可以修饰变量，方法和类 -- 修饰变量的时候这个变量一旦被初始化完成就不会被改变 -- 修饰方法说明在这个方法不能被修改 -- 修饰类说明这个类不能被继承 - final一般也是一种多线程的设计模式，因为对象不变就不存在多线程并发安全的问题了  static关键字这么用 - static修饰方法：不需要依靠实例对象来访问 - static修饰变量：类对象，在类加载的时候就有了 - static修饰代码块：在类加载的时候就初始化，只初始化一次 - static修饰内部类：就是一个内部类 - static静态导包  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/base/object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/base/object/</guid>
      <description> Object超类  ⬅️BACK-Java面试题目录
  Object超类 - 说活你对Object中hashCode()和equals()方法的理解，在什么场景下需要对这两个方法进行重写，你是这么重写的 - 深拷贝和浅拷贝的区别？Object的clone()是深拷贝还是浅拷贝?  说活你对Object中hashCode()和equals()方法的理解，在什么场景下需要对这两个方法进行重写，你是这么重写的  🔗「Oracle Doc」JavaSE 8 #Object
 ## 方法理解 - hashcode()是生成对象的hash值 - equals是比较两个对象是否相等(本质就是==，比较对象的引用地址) ## 什么时候重写 - 重写equals()就要重写hashcode()方法 ### 为什么 - 在基于hash的集合中，是基于equals()来判断对象是否相等的，如果equals()返回true，那么hashcode一定是一样的  🔗「思维发散」Hashmap是怎么判断两个对象是同一对象的
深拷贝和浅拷贝的区别？Object的clone()是深拷贝还是浅拷贝? ## 深拷贝&amp;amp;浅拷贝 - 对于基本类型来说，浅拷贝和深拷贝一样，都是对值进行拷贝 - 对于引用类型来说: -- 浅拷贝:只是复制了对应的引用，对象没有被拷贝，并且这个对象的其他引用还在 -- 深拷贝:不只复制了对象的引用，对象本身也被复制了 ## Object的clone() 浅拷贝  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/base/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/base/string/</guid>
      <description> String系  ⬅️BACK-Java面试题目录
  String系 - String为什么设计成final类?  String、StringBuilder和StringBuffer之间的异同 String中UTF-8编码和GBK编码有什么区别   String为什么设计成final类?  🔗String源码&amp;ndash;Jaswine
 - 为了实现字符串池 - 为了线程安全 - 为了实现String可以创建HashCode不可变性  String、StringBuilder和StringBuffer之间的异同  🔗String源码&amp;ndash;Jaswine     类名 底层数据结构 是否线程安全 父类     String char[] 是(因为是final类) /   StringBuffer char[] 是 AbstractStringBuilder   StringBuilder char[] 否 AbstractStringBuilder     Tips：  Java9开始String、StringBuilder和StringBuffer的底层改成byte[](//todo 为什么)   String中UTF-8编码和GBK编码有什么区别 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/base/symbol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/base/symbol/</guid>
      <description> Java中的运算符  ⬅️BACK-Java面试题目录
  Java中的运算符  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/base/</guid>
      <description> Java集合基础面试题  ⬅️BACK-Java面试题目录
  Java集合基础面试题  为什么要设计迭代器(Iterator)   为什么要设计迭代器(Iterator) - 给所有的collection提供统一的遍历接口  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/list/arraylist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/list/arraylist/</guid>
      <description> ArrayList面试题  ⬅️BACK-Java面试题目录
  ArrayList面试题  ArrayList、LinkedList和Vector之间的区别，他们线程安全吗？不安全怎么解决 ArrayList是如何实现动态扩容的 如何在遍历arraylist的时候安全删除其中一个元素   ArrayList、LinkedList和Vector之间的区别，他们线程安全吗？不安全怎么解决  🔗链接ArrayList为什么线程不安全及解决办法 🔗连接LinkedList为什么线程不安全及解决办法     名称 数据结构 是否线程安全 原理 线程安全方法     ArrayList Object数组 不安全 / 1.使用Collections.synchronizedList(List)包装
2.使用CopyOnWriteArrayList   LinkedList 双向链表 不安全 / 1.使用Collections.synchronizedList(List)包装
   Vector Object数组 安全 (同步方法)synchronized /    ArrayList是如何实现动态扩容的 // TODO 失效的链接
 🔗「源码分析」-Java中ArrayList是如何实现数组动态扩容的
 - ArrayList的本质是Object[]，所以他本质上就是数组的动态扩容 - Java底层的数组扩容就是通过数组拷贝完成的，每一次扩容原来的2倍  如何在遍历arraylist的时候安全删除其中一个元素 - 返回ArrayList的Iterator对象，然后使用iterator的remove方法 - 如果是多线程并发的情况，要对iterator对象加锁  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/list/copyonwritearraylist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/list/copyonwritearraylist/</guid>
      <description> CopyONWriteArrayList面试题  ⬅️BACK-Java面试题目录
  CopyONWriteArrayList面试题  CopyONWriteArrayList有什么特性？是如何实现这个特性的 CopyONWriteArrayList有什么优缺点   CopyONWriteArrayList有什么特性？是如何实现这个特性的 ## 特性 - 线程安全的，在读的时候不加锁，但是在写的时候加锁 ## 原理 - 当要修改数据的时候，将原来的数据copy一份，在新的数据上进行修改，最后再把指针指到新数据上  CopyONWriteArrayList有什么优缺点 ## 优点 - 线程安全，锁粒度变小 ## 缺点 - 占用空间 - 不能保证数据实时一致性，只能保证最终一致性  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/list/linkedlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/list/linkedlist/</guid>
      <description> LinkedList面试题  ⬅️BACK-Java面试题目录
  LinkedList面试题  LinkedList底层数据结构是什么样子的？他有什么特性 LinkedList线程不安全的本质是什么？   LinkedList底层数据结构是什么样子的？他有什么特性  ## 底层数据结构 - JDK1.6之前是循环链表，之后为双向链表 ## 特性 - 申请的内存不要连续 - 插入和删除时间复杂度为O(1)  LinkedList线程不安全的本质是什么？ ## 线程不安全的本质 - 在多线程并发操作的时候，链表有成环的风险，所以是不安全的  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/list/vector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/list/vector/</guid>
      <description> Vector面试题  ⬅️BACK-Java面试题目录
  Vector面试题  为什么Vector是线程安全的？   为什么Vector是线程安全的？ # 线程安全本质 - 给方法都加上了synchronized，变成了同步方法  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/map/concurrenthashmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/map/concurrenthashmap/</guid>
      <description> ConcurrentHashmap面试题  ⬅️BACK-Java面试题目录
  ConcurrentHashmap面试题  ConcurrentHashMap在1.7和1.8中有什么区别？   ConcurrentHashMap在1.7和1.8中有什么区别？  🔗「源码分析」ConcurrentHashMap
     1.7 1.8      使用Segment+HashEntry+Unsafe实现线程安全 使用Synchronized+CAS+Node+Unfafe实现线程安全    初始化数组大小时候加锁 使用sizeCtl来标记table是不是在初始化    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/map/hashmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/map/hashmap/</guid>
      <description>Hashmap面试题  ⬅️BACK-Java面试题目录
  Hashmap面试题  HashMap底层原理是什么？存储方式，默认容量是什么？怎么实现扩容的？ JDK1.8中相较JDK1.7对Hashmap做了哪些优化？这样做有什么好处 HashMap是线程安全的吗？为什么？解决办法是什么？原理是什么？ HashMap和Hashtable之间有什么不同之处? Hashmap是如何判断两个key是否为同一个key   HashMap底层原理是什么？存储方式，默认容量是什么？怎么实现扩容的？  🔗Hashmap#put-源码分析
 # 存储方式 - Java8中使用位桶(数组，长度为16)+链表/红黑树实现 - 链表长度超过阈值(8)时转成红黑树(减少查找时间) # 底层原理 ## PUT方法 - 1.先判断是否要扩容 - 2.计算key的hashcode，如果没有重复就插入，重复就覆盖 - 2.1.如果链表的长度大于8则转成红黑树 - 3.判断此时的hashmap是不是要扩容 - 4.结束 # 默认容量 - 默认的hash表大小为16 - 默认链表长度为8，超过这个数值就转换成为红黑树 # 扩容 ## 什么时候扩容(JDK1.8) - hash碰撞写入链表的长度超过了8 &amp;amp;&amp;amp; table的长度不小于64 - 也就是说，当发生hash冲突的时候默认先扩容，扩到table长度大于等于64的时候再转换成为红黑树 ## 如何扩容(JDK1.8) - 1.先扩大hash表的大小为原来的两倍 - 2.重新计算hash值插入到新的hash表中  JDK1.8中相较JDK1.7对Hashmap做了哪些优化？这样做有什么好处 ## hash方法优化 - 原来要经过四次扰动，现在就一次扰动 ## 链表存储变成链表\红黑树存储 - 链表遍历的时间复杂度是O(n)，转成红黑树是O(logn) ## 扩容方法优化 -  HashMap是线程安全的吗？为什么？解决办法是什么？原理是什么？  🔗源码分析-Collections.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/map/linkedhashmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/map/linkedhashmap/</guid>
      <description> LinkedHashMap面试题  ⬅️BACK-Java面试题目录   LinkedHashMap面试题  LinkedHashmap底层数据结构是什么？他有什么特点 LinkedHashmap是怎么保持插入的顺序的   LinkedHashmap底层数据结构是什么？他有什么特点 ## 底层数据结构 - LinkedHashmap继承自Hashmap，所以他的底层结构就是和Hashmap相同的 ## 特点 - 插入有序  LinkedHashmap是怎么保持插入的顺序的 ## 维护顺序 - 维护了一个双向链表来维护对象的顺序  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/map/treemap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/map/treemap/</guid>
      <description> TreeMap面试题  ⬅️BACK-Java面试题目录   TreeMap面试题  TreeMap的底层数据结构是什么样子的，他有什么特性   TreeMap的底层数据结构是什么样子的，他有什么特性 ## 底层数据结构 - 红黑树 ## 特性 - 存入的对象按照key的顺序排列  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/collection/set/hashset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/collection/set/hashset/</guid>
      <description> HashSet面试题  HashSet面试题  HashSet内部是怎么工作的 - HashSet内部使用HashMap来实现的 - HashSet是对value的进行hash计算(因为set中元素不能重复)  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/concurrent/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/concurrent/base/</guid>
      <description>烂大街的多线程基础题  ⬅️BACK-Java面试题目录
  烂大街的多线程基础题  Java中开启线程的方式有哪些？ Java中线程的生命周期是怎么样的？每个阶段的特征是什么样的？状态是怎么转换的？ 一个线程两次调用start()方法会怎么样 Java多线程中调用wait() 和 sleep()方法有什么不同？ 讲讲Java同步机制的wait和notify Java中的fork join框架是什么？ 你知道停止一个线程有哪些方法，他们之间都有什么区别 ThreadLocal用过吗？用途是什么，原理是什么，使用的时候有什么注意的吗？ 什么是线程安全？线程不安全的根源是什么？Java是怎么解决的 volatile的原理，作用，能代替锁吗？ JDK1.6对synchronized进行了怎么的优化 synchronized的原理是什么？一般用在什么地方？(修饰静态和非静态方法有什么区别)   Java中开启线程的方式有哪些？ Java中线程的生命周期是怎么样的？每个阶段的特征是什么样的？状态是怎么转换的？ 一个线程两次调用start()方法会怎么样 - 会抛出IllegalThreadStateException错误  Java多线程中调用wait() 和 sleep()方法有什么不同？    wait sleep     Object的方法 Thread的方法   执行的时候释放锁 执行的时候不释放锁   只能在同步方法和同步块中使用 可以在任何地方使用   无需捕捉异常 需要捕捉异常    讲讲Java同步机制的wait和notify - wait和notify配合synchronized使用实现线程间的同步 - 简单的来说就是管程(或者说是监视器)  Java中的fork join框架是什么？ 47) 如果同步块内的线程抛出异常会发生什么？</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/concurrent/example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/concurrent/example/</guid>
      <description>Java多线程案例  Java多线程案例  现在有一个第三方接口，有很多线程去调用它获得数据，如何实现每秒钟最多有10个线程同时调用它 用三个线程按顺序打印abc，怎么做到   现在有一个第三方接口，有很多线程去调用它获得数据，如何实现每秒钟最多有10个线程同时调用它 用三个线程按顺序打印abc，怎么做到 - 使用wait，notify -  现在让你实现一个并发安全的链表，你怎么实现
多线程如果线程挂住了怎么办
countdownlatch和cyclicbarrier的内部原理和用法，以及相互之间的差别
AbstractQueuedSynchronizer了解多少，讲讲加锁和解锁的流程，独占锁和公平锁加锁有什么不同
简述ConcurrentLinkQueue和LinkedBlockingQueue的用处和不同之处
导致线程死锁的原因，怎么解除线程死锁
多线程(可能不在一台机器上)相互之间要相互等待协调完成某种工作，请问怎么设计
什么是多线程环境下的伪共享(false sharing)？
说说你对线程局部变量的理解</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/concurrent/juc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/concurrent/juc/</guid>
      <description> JUC包面试题  ⬅️BACK-Java面试题目录
  JUC包面试题  19) 什么是FutureTask？   19) 什么是FutureTask？ </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/concurrent/lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/concurrent/lock/</guid>
      <description>Java中锁面试题  ⬅️BACK-Java面试题目录
  Java中锁面试题  引入锁之后带来哪些问题？本质是什么？ 说说你对锁的相关名词的理解 单例模式的双检锁是什么? 死锁产生的条件是什么？如何避免死锁？ synchronized在jdk1.6后得到了优化？是如何优化的？ 锁膨胀过程? 说说ReentrantLock和synchronized的异同吧 Lock和synchronized的区别 说说降低锁竞争的方法 有哪些无锁的数据结构，他们的实现原理是什么？ cas机制是什么？怎么解决ABA问题 用过读写锁吗？原理是什么，一般在什么场景下使用 单例模式怎么实现线程安全   引入锁之后带来哪些问题？本质是什么？ ## 死锁 ## 优先级倒置 ## 饥饿锁  说说你对锁的相关名词的理解 # 自旋锁 - 当线程A占用锁，线程B拿不到锁的时候就被挂起(阻塞)，自旋锁是线程B不放弃CPU的时间片，在原地一直尝试获取锁 # 无锁 / 偏向锁 / 轻量级锁 / 重量级锁 - 这是锁的四种状态，在对象头中使用字段来标记 - 四种状态随着竞争的情况升级，不可降级 - 这四种状态都不是Java语言中的锁，而是JVM为了提高锁的获取效率而做的优化 -- 无锁--&amp;gt;对象没有被锁定 -- 偏向锁--&amp;gt;一段同步代码被线程所访问，那么线程自动获取锁 -- 轻量级锁--&amp;gt;当锁是偏向锁的时候，被另一个线程访问，偏向锁会升级为轻量级锁，其他线程通过自旋的方式尝试获取锁，不会阻塞，提高性能 -- 重量级锁--&amp;gt;当一个锁是轻量级锁的时候，另外一个线程通过自旋的方式到一定次数的时候还没有获得锁就会进入到阻塞的，这个轻量级锁就会膨胀为重量级锁，其他线程拿不到锁就会进入阻塞 # 分段锁 - # 共享锁 / 独享锁 - 共享锁--&amp;gt;锁被多个线程共有 - 独享锁--&amp;gt;锁只可以同时被一个线程占用 # 可重入锁 / 不可重入锁 - 可重入锁--&amp;gt;可重复可递归调用的锁，外层使用了内层还可以使用 - 不可重入锁--&amp;gt;不可重复递归调用，重复使用就会发生死锁 # 公平锁 / 非公平锁 - 公平锁--&amp;gt;多个线程按照申请锁的顺序来获得锁 - 非公平锁--&amp;gt;多个线程不是按照申请锁的顺序来获得锁，可能会饥饿现象 # 悲观锁 / 乐观锁 - 悲观锁--&amp;gt;认为每次去拿数据的时候数据都会被别人修改 - 乐观锁--&amp;gt;在拿数据的时候乐观的认为没有人去修改，但是在修改数据的时候会去验证一下数据有没有被修改 ---使用版本号机制或者CAS算法实现  单例模式的双检锁是什么?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/concurrent/pool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/concurrent/pool/</guid>
      <description> Java线程池面试题  ⬅️BACK-Java面试题目录
  Java线程池面试题  Java线程池中submit() 和 execute()方法有什么区别？ 如果你提交任务时，线程池队列已满。会时发会生什么？ 说说Java中常用的线程池模式以及不同线程池的使用场景 线程池关闭的方式有哪些？各自的区别是什么？   Java线程池中submit() 和 execute()方法有什么区别？ 如果你提交任务时，线程池队列已满。会时发会生什么？ 说说Java中常用的线程池模式以及不同线程池的使用场景   线程池关闭的方式有哪些？各自的区别是什么？ # 方式 - shutdown() - shutdownNow() # 区别 -  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/features/8/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/features/8/datetime/</guid>
      <description> 新的日期时间API面试题  ⬅️BACK-Java面试题目录
  新的日期时间API面试题  Java8中新增了那些日期时间类？分别的作用是什么？ Java8中新增了那些日期时间类和原来的Date()有什么区别？   Java8中新增了那些日期时间类？分别的作用是什么？  🔗「源码」Java8中的新时间API&amp;ndash;Jaswine
 新的日期时间类
   分类 类 作用     日期时间 LocalDateTime 包含年月日时分秒   日期 LocalDate 包含年月日   时间 LocalTime 包含时分秒   时区 ZondId 时区代表   时区 ZonedDateTime 包含时分秒   时区 ZoneOffSet 包含时分秒    Java8中新增了那些日期时间类和原来的Date()有什么区别？  🔗「源码」Java8中的新时间API&amp;ndash;Jaswine
 - 线程安全(类是final的)  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/features/8/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/features/8/lambda/</guid>
      <description> Lambda面试题  ⬅️BACK-Java面试题目录
  Lambda面试题  lambda底层原理是什么？   lambda底层原理是什么？  🔗Java8中Lambda表达式实现原理&amp;ndash;Jaswine
自动生成一个私有的静态函数   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/features/8/optional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/features/8/optional/</guid>
      <description> Optional面试题  ⬅️BACK-Java面试题目录
  Optional面试题  Optional出现的原因？用途和原理是什么？   Optional出现的原因？用途和原理是什么？  🔗「源码」Java8中的Optional类&amp;ndash;Jaswine
 ## 出现原因 程序中的null带来的空指针异常 ## 用途 - 处理了null带来的空指针异常问题 ## 原理  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/features/8/stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/features/8/stream/</guid>
      <description> Stream面试题  ⬅️BACK-Java面试题目录
  Stream面试题  Stream底层原理是什么？ Stream使用场景是什么？怎么使用？ Stream相较原来的写法有什么优缺点？   Stream底层原理是什么？  🔗Stream实现原理&amp;ndash;Jaswine
   Stream使用场景是什么？怎么使用？  🔗Stream实现原理&amp;ndash;Jaswine
 - 集合操作 - 并行计算  Stream相较原来的写法有什么优缺点？  🔗Stream实现原理&amp;ndash;Jaswine
 # 优点 - 函数式风格便于理解 - 并行计算，线程安全  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/io/aio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/io/aio/</guid>
      <description> AIO面试题  ⬅️BACK-Java面试题目录
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/io/bio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/io/bio/</guid>
      <description> BIO面试题  ⬅️BACK-Java面试题目录
  BIO面试题  使用BIO中的Socket编写的服务端代码执行的逻辑是什么？ 如果使用BIO的类来编写Socket，如何进行性能优化？优缺点是什么？   对于IO的知识，汇聚了一遍Blog，地址为
 🔗「大白话」计算机世界的I/O
 使用BIO中的Socket编写的服务端代码执行的逻辑是什么？ 1.创建一个socket 2.绑定端口 3.执行accept方法  如果使用BIO的类来编写Socket，如何进行性能优化？优缺点是什么？ ## 优化 - serversocket.accept()获得一个socket之后 - 把socket.getInputStream()放到别的线程中处理 ## 优点 - 主线程负责accept就可以了，不负责接收数据后的业务，这样线程就不会被阻塞 ## 缺点 - 创建新线程，当大量连接接入的时候会造成系统资源被大量消耗  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/io/nio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/io/nio/</guid>
      <description> NIO面试题  ⬅️BACK-Java面试题目录
  NIO面试题  Java是怎么实现NIO的，重要的类是那些？功能是什么？ 你对NIO是怎么理解的，Java中的NIO是怎么实现的？NIO和AIO,BIO的区别是什么？ 什么是零拷贝   对于IO的知识，汇聚了一遍Blog，地址为
 🔗「大白话」计算机世界的I/O
 Java是怎么实现NIO的，重要的类是那些？功能是什么？ ## 实现原理 本质上是调用了操作系统的selector函数，创建了一个容器来管理io ## 重要的类 - Selector - Channel - Buffer  你对NIO是怎么理解的，Java中的NIO是怎么实现的？NIO和AIO,BIO的区别是什么？ # NIO - 使用缓冲区和通道的概念来实现处理数据 - NIO中通道是双向的 - 缓冲区可以分片 # 实现 - 客户端将流写到缓冲区 - 使用channel将数据从buffer转移 # NIO和AIO,BIO的区别 - AIO是异步非阻塞的，BIO是同步阻塞的，NIO是同步非阻塞的 - AIO也可以叫做NIO2 # Tips - JDK1.7中NIO中新增了4个异步通道  什么是零拷贝 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/oo/abstract/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/oo/abstract/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/oo/extrend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/oo/extrend/</guid>
      <description> Java继承  Java继承  Java抽象类和接口的异同，说说为什么Java这么设计   Java抽象类和接口的异同，说说为什么Java这么设计     接口 抽象类     变量     方法 全是抽象方法 可以不全是抽象方法     设计原因  避免了多继承 接口和继承存在的意义不同   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/oo/package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/oo/package/</guid>
      <description> Java封装  Java封装  结合OO设计理念，谈谈访问修饰符public，default，protected和private在应用中设计的作用   结合OO设计理念，谈谈访问修饰符public，default，protected和private在应用中设计的作用     同类 同包 子类 非同包类     public Y Y Y Y   protected Y Y Y X   default Y Y X X   private Y X X X    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/se/oo/polymorphisn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/se/oo/polymorphisn/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/0menu/</guid>
      <description> JVM知识分类  JVM知识分类  JMM  运行时内存 对象及其生命周期  GC  GC算法 GC收集器  类文件及其加载  类文件结构 类加载  JVM调优  JVM参数  高并发  高并发    JMM 运行时内存 对象及其生命周期 GC GC算法 GC收集器 类文件及其加载 类文件结构 类加载 JVM调优 JVM参数 高并发 高并发 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/class/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/class/file/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/class/load/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/class/load/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/classload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/classload/</guid>
      <description> 类加载 类加载的步骤是什么
加载--&amp;gt;验证--&amp;gt;准备--&amp;gt;解析--&amp;gt;初始化--&amp;gt;使用--&amp;gt;卸载  Class.forName()和classloader的区别
- Class.forName()将class文件加载到虚拟机中到初始化的工作 - classloader只是将class文件加载到jvm中  说说你了解的类加载器，以及他们工作的原理
# 类加载器 - 启动类加载器(Bootstrap ClassLoader) - 扩展类加载器(ExtClassLoader) - 应用类家再起(AppClassLoader) # 原理  可以打破双亲委派吗？是怎么打破的？
# 可以打破双亲委派双亲委派 - SPI就是打破双亲委派 # 怎么打破  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/concurrent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/concurrent/</guid>
      <description> 高并发 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/gc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/gc/</guid>
      <description>垃圾回收(GC) 说说你知道的GC算法和对应的原理是什么？都有缺点
   算法 原理 缺点     标记-清除 先对对象进行标记然后回收 内存碎片太多   标记-复制-清除 将存活的对象复制到一块空内存上，然后清除原来的内存 空间浪费   标记-压缩-清除 将存活的对象移动到一个地方，然后指针之后的全部删除    分代收集 对对象进行分代然后不同的代使用不同的回收算法     JVM中一次完整的GC流程是怎么样的，对象如何晋升到老年代
# 流程 1.触发GC - 内存不够使用 - 主动触发GC，System.gc() 2.标记 - 找出所有对象的 3.复制 | 压缩 - 复制算法就是将存活的对象复制到一个空的内存块 - 压缩(整理)算法计算出存活对象的新地址然后移动对象的地方 3.清理 - 将之前标记的dead的对象回收了 # 如何晋升老年代 - 大对象直接进入老年代 - 几次Minor GC还存活的对象  说说你对Minor GC和Full GC的理解
Minor GC
 定义：新生代(包括Eden和Survivor)垃圾搜集叫做 Minor GC 触发条件：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/gc/algo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/gc/algo/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/gc/machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/gc/machine/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/jmm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/jmm/</guid>
      <description>Java虚拟机内存模型 内存模型和分代 简单说说JVM中内存的分配情况吧
Java8之前： # 线程私有 - 程序计数器(当前线程执行字节码的行号指示器) - 虚拟机栈(局部变量，方法信息) - 本地方法栈(JNI方法) # 线程共有 - 堆内存(对象存放的地方) - 方法区(已被虚拟机加载的类信息，常量，静态变量) -- 运行时常量池(方法区的一部分) # 特别 - 直接内存(非JVM内存规范中的一部分)  OOM和排查 什么时候会发生内存溢出(OOM)？
# 程序计数器 - 不会发生OOM错误 # 虚拟机栈 &amp;amp; 本地方法栈 - 虚拟机扩展栈的时候无法获取到足够的空间就会抛出OOM的错误 # 堆内存 - 对象数量达到堆内存的最大值的时候出现OOM错误 # 方法区 &amp;amp; 运行时常量池 - 产生大量的类信息大于了方法区的最大值  Java内存为什么分成新生代，老年代，持久代？是怎么划分的呢？怎么回收的呢？新生代中为什么要分为Eden和Survivor
# 为什么分代 - 为了优化GC性能(Java中每个对象的生命周期不一样，所以不同对象要分类以便更好的回收) # 怎么划分 - 新生代(Young Generation) - 分成三个部分：Eden，From Survivor ，To Survivor，比例是8:1:1 - 保持一个Survivor为空 - 年老代(Tenured Generation) - 多次GC都没有被GC的会进入年老带 - 新生代没有空间了会直接进入年老代 - 永久代(Permanent Generation) - 对应运行时内存的“方法区”，一般不会被GC，JVM退出才销毁 # 怎么回收 - 新生代 - 因为生命周期很短，GC吞吐量很高，适合使用复制算法来GC，这样保证来复制的数据量最小 - 年老代 - 因为对象的存活时间很长，所以要移动大量的对象，效率很低，所以年老代适合使用标记-清除算法 # 为什么分为Eden和Survivor  你对JVM内存中重排序，内存屏障，happen-before，主内存，工作内存是怎么理解的</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/jmm/mem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/jmm/mem/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/jmm/object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/jmm/object/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/object/</guid>
      <description> 对象解析 说说你对Java对象组成的理解
- Java对象内部由三个部分组成:对象头，实例数据，对齐填充字节 # 对象头 - 对象头包括如下部分: -- MarkWord:记录了对象的锁，GC等等的信息 -- 指向类的指针 -- 数组的长度(数组对象才有) # 实例数据 - 实例数据就是我们在代码中看到的属性和值 # 填充字节 - 对齐填充字节:因为JVM中对象的是8bit的整数倍，所有要有相关的字节来填充  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/params/</guid>
      <description>Jvm参数 说说你知道的JVM参数</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/java/vm/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/java/vm/tools/</guid>
      <description> 实例 如何Java内存泄漏的问题进行调查和定位
 使用jps -l 查询所有的JVM进程 使用jstat &amp;lt;对应进程id&amp;gt;监控当前进程的情况 使用jmap来看内存分布快照 把内存堆dump下来然后使用MAT来分析内存  __
# 1. # 2.使用jstat 使用jmap和jstack  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/message/kafka/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/message/kafka/0menu/</guid>
      <description> kafka  kafka  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/message/pulsar/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/message/pulsar/0menu/</guid>
      <description> pulsar面试题  pulsar面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/message/rabbitmq/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/message/rabbitmq/0menu/</guid>
      <description> RabbitMQ面试题  RabbitMQ面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/message/rocketmq/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/message/rocketmq/0menu/</guid>
      <description> RocketMQ面试题  RocketMQ面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/message/theory/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/message/theory/0menu/</guid>
      <description> 消息队列理论面试题  消息队列理论面试题  如何保证消息不丢失？ 怎么处理重复消费的问题？ 消息积压了怎么处理？   如何保证消息不丢失？ 怎么处理重复消费的问题？ 消息积压了怎么处理？ </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/mid/druid/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/mid/druid/0menu/</guid>
      <description> Druid面试题  Druid面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/mid/mybatis/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/mid/mybatis/0menu/</guid>
      <description> Mybatis面试题  Mybatis面试题  Mybatis基础   Mybatis基础 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/mid/mybatis/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/mid/mybatis/base/</guid>
      <description> Mybatis基础  Mybatis基础  应用 原理   应用 Mybatis中#{}和${}区别 |#|$| |:&amp;ndash;|:&amp;ndash;| |预编译|直接传入值| |可以防止SQL注入|不能防止SQL注入| |不能放在order by后面|可以放在order by后面|
Mybatis传入多个参数
- #{0},#{1} - @param注解  Mybatis分页查询的原理
- 使用pagehelp做分页查询 - 本质上就是对sql进行拦截然后重写  原理 Mybatis定义的接口是怎么找到实现的
使用动态代理技术  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/mid/netty/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/mid/netty/0menu/</guid>
      <description> Netty面试题  Netty面试题  Netty基础   Netty基础 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/mid/netty/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/mid/netty/base/</guid>
      <description>Netty基础面试题  Netty基础面试题  应用   为什么选择Netty
Netty是怎么实现异步非阻塞的IO的
Netty的线程模型是什么？如何基于Reactor模型上实现的
Netty中fashwheeltimer的用法，实现原理，是否出现过调用不够准时，怎么解决这个问题
Netty的通讯协议是什么样的
应用 Netty的心跳处理在弱网下怎么办？
为什么选择Netty</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/neo4j/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/neo4j/0menu/</guid>
      <description> Neo4j面试题  Neo4j面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/0menu/</guid>
      <description> Redis面试题  Redis面试题  数据类型 持久化 键 内存 线程模型 事务 集群  分区 缓存   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/cache/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/cluster/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/datatype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/datatype/</guid>
      <description> Redis数据类型面试题  Redis数据类型面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/key/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/memory/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/partition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/partition/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/persistence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/persistence/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/thread/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/nosql/redis/trans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/nosql/redis/trans/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/search/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/search/elasticsearch/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/search/solr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/search/solr/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/security/web/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/security/web/0menu/</guid>
      <description> Web安全  Web安全  浏览器安全  同源策略 跨站脚本攻击-XSS 跨站点请求伪造-CSRF 点击劫持  服务器安全  SQL注入 文件上传漏洞 Oauth2 &amp;amp; SSO DDOS  安全运维   浏览器安全 同源策略 跨站脚本攻击-XSS 跨站点请求伪造-CSRF 点击劫持 服务器安全 SQL注入 文件上传漏洞 Oauth2 &amp;amp; SSO DDOS 安全运维 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/boot/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/boot/0menu/</guid>
      <description> SpringBoot知识点  SpringBoot知识点  SpringBoot新特性  起步依赖 自动装配 Actuator    SpringBoot新特性 起步依赖 自动装配 Actuator </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/cloud/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/cloud/0menu/</guid>
      <description> SpringCloud知识点  SpringCloud知识点  服务注册&amp;amp;发现  Nacos  负载均衡  Ribbon  网关  Spring Cloud Gateway  服务调用  Feign  服务容错  Spring Cloud Hystrix Spring Cloud Sentinel  服务监控  Spring Cloud Sleuth Spring Cloud Zipkin    服务注册&amp;amp;发现 Nacos 负载均衡 Ribbon 网关 Spring Cloud Gateway 服务调用 Feign 服务容错 Spring Cloud Hystrix Spring Cloud Sentinel 服务监控 Spring Cloud Sleuth Spring Cloud Zipkin </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/0menu/</guid>
      <description> Spring FrameWork 知识点  Spring FrameWork 知识点  Spring 核心  IOC  IOC容器 Bean 注解  AOP  Spring WebMVC Spring WebFlux Spring Data  JDBC JMS ORM 事务  Spring Security Spring 设计模式   Spring 核心 IOC IOC容器 Bean 注解 AOP Spring WebMVC Spring WebFlux Spring Data JDBC JMS ORM 事务 Spring Security Spring 设计模式 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/core/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/core/</guid>
      <description>Spring FrameWork核心 Spring容器基础 Spring容器&amp;amp;Bean Spring中IOC是怎么实现的，IOC容器初始化的过程是什么样子的
Spring的加载流程是什么
# 主要类 Spring加载中有以下几个重要的类： - BeanFactory：生产Bean - Resource：Bean配置文件 - BeanDefinition：Bean定义 # 流程 - 资源定位：找到配置文件 - BeanDefinition载入和解析 -- 找到配置文件Resource -- 将配置文件解析成BeanDefinition - BeanDefinition注册 -- 将BeanDefinition向Map中注册Map&amp;lt;name,BeanDefinition&amp;gt; - bean的实例化和依赖注入 -- 通过反射或者cglib来创造bean # Tips: - Resource本质上就是字节流 - BeanDefinition是bean的详细信息  说说BeanFactory和ApplicationContext有什么区别
说说你对Spring中Bean的理解
说说你对spring中bean的生命周期的理解，spring是怎么管理bean的生命周期的
Spring AOP Spring中AOP实现的原理是什么，实现方式是什么？</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/core/aop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/core/aop/</guid>
      <description> Spring中AOP面试题  ⬅️BACK-Spring FrameWork面试题目录
  Spring中AOP面试题  Spring中AOP实现的原理是什么，实现方式是什么？ 如何使用spring中的aop？   Spring中AOP实现的原理是什么，实现方式是什么？ # 原理 - 动态代理 # 实现方式 - JDK动态代理 - cglib动态代理  如何使用spring中的aop？ ## 三个概念 - 切点() - 切面(使用@Aspect) - 连接点 ## 使用  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/core/ioc/annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/core/ioc/annotation/</guid>
      <description> Spring注解面试题  ⬅️BACK-Spring FrameWork面试题目录
  Spring注解面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/core/ioc/bean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/core/ioc/bean/</guid>
      <description> Spring Bean模块面试题  ⬅️BACK-Spring FrameWork面试题目录
  Spring Bean模块面试题  Spring中Bean的生命周期是什么样的？ 什么是Bean的作用域？有什么用？如何定义的? Spring中Bean为什么默认是单例的？有什么优缺点 Spring中Bean的自动装配是什么意思？   Spring中Bean的生命周期是什么样的？ - 1.实例化Bean -- BeanFactory容器在用户向容器请求一个bean的时候才会初始化 -- ApplicationContext在容器初始化的时候就会实例化所有bean -- 容器通过获取BeanDefinition对象来对Bean进行实例化 -- 实例化的对象被抱在BeanWrapper对象中，这个Wrapper提供了设置对象的的接口，避免使用反射来设置属性(因为反射很慢) - 2.设置对象属性 -- 根据BeanDefinition信息进行依赖注入 - 3.注入Aware接口 -- Spring检测对象石佛实现了xxxAware接口，如果实现了就将对应的Aware注入给Bean - 4.BeanPostProcessor预初始化Bean -- postProcessBeforeInitialzation( Object bean, String beanName ) 当前正在初始化的bean对象会被传递进来，我们就可以对这个bean作任何处理。 这个函数会先于InitialzationBean执行，因此称为前置处理。 所有Aware接口的注入就是在这一步完成的。-- -- postProcessAfterInitialzation( Object bean, String beanName ) 当前正在初始化的bean对象会被传递进来，我们就可以对这个bean作任何处理。 这个函数会在InitialzationBean完成后执行，因此称为后置处理。 - 5.InitialzationBean -- 实现了InitialzationBean接口的bean在属性设置成功后执行的初始化方法 ======Bean可以使用了====== - 6.容器关闭 -- 调用destroy()，让Java回收bean  什么是Bean的作用域？有什么用？如何定义的? ## 作用域 ## 作用 ## 如何定义  Spring中Bean为什么默认是单例的？有什么优缺点 ## 优点 - 减少重复创建对象，开销较大 - 较少GC ## 缺点 - 线程不安全，并发使用对象的时候会存在线程不安全的情况  Spring中Bean的自动装配是什么意思？   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/core/ioc/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/core/ioc/container/</guid>
      <description>Spring实现IOC功能  ⬅️BACK-Spring FrameWork面试题目录
  Spring实现IOC功能  什么是IOC？有什么优缺点？ 依赖注入是什么意思？有哪些方式呢？ Spring是怎么实现IOC？ 依赖注入(DI)是什么意思？如何依赖注入？Spring是如何实心依赖注入的？为什么？ BeanFactory和ApplicationContext之间的区别是什么？ Spring容器初始化的过程是什么样子的？   什么是IOC？有什么优缺点？ # 什么是IOC 将创建对象的功能交给别人去完成(spring容器)     优点 缺点     组件之间解耦 对象创建的过程变得复杂    使用反射来创建对象，性能有损耗    依赖注入是什么意思？有哪些方式呢？ # 依赖注入 - 完成一件事要多个配合，通常和自己没有关系 # 方式 - 构造器注入 - set注入 - 静态工厂 - 实例工厂  Spring是怎么实现IOC？ 使用BeanFactory和ApplicationContext两个类  依赖注入(DI)是什么意思？如何依赖注入？Spring是如何实心依赖注入的？为什么？ ## DI 在bean创建的时候将bean注入到他们得消费者中 ## 依赖注入的方式 - 构造器注入 - set注入 - 静态工厂 - 实例工厂 ## spring的依赖注入方式  BeanFactory和ApplicationContext之间的区别是什么？  🔗「源码分析」Spring IOC实现原理</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/data/</guid>
      <description>SpringData Spring事务 Spring是怎么配置事务和管理事务的
# 怎么管理事务的 - Spring事务管理使用TransactionDefinition，TransactionStatus和PlatformTransactionManager来完成事务的管理工作。 # XML配置方式  Spring的事务隔离级别
 讲讲Spring事务的传播属性
讲讲Spring事务失效的情况
spring RestTemplate的具体实现</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/data/jdbc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/data/jdbc/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/data/jms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/data/jms/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/data/orm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/data/orm/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/data/trans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/data/trans/</guid>
      <description> Spring事务面试题  ⬅️BACK-Spring Framwork面试题目录
  Spring事务面试题  说说你对spring事务的理解 spring是如何管理事务的？实现原理是什么？ spring中有哪些事务传播机制   说说你对spring事务的理解 spring不是事务的实现者，但是他提供了事务的统一管理接口  spring是如何管理事务的？实现原理是什么？ ## 管理事务 ## 实现原理  spring中有哪些事务传播机制    传播机制 描述     PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择   PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行   PROPAGATION_MANDATORY 支持当前事务，如果当前没有事务，就抛出异常   PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起   PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起   PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常   PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/model/</guid>
      <description> Spring中的设计模式 单例模式 Spring的单例实现原理
- 使用单例注册表的方式来管理bean --  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/webflux/web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/webflux/web/</guid>
      <description> Spring Web SpringMVC SpringMVC的运行原理和启动流程是什么样子的
# 启动流程 # 运行原理 - 请求到达DispatchServlet，根据请求的相关信息到HandlerMapping中查找到具体的Handler(Controller) - Controller调用具体的业务逻辑后将结果返给DispatcherServlet，最后返给客户端  DispatchServlet初始化过程
 说说你在SpringMVC用到的注解，作用是什么
SpringMVC中的Controller是单例还是多例，怎么保证并发的安全
Spring WebFlow </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/spring/framework/webmvc/web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/spring/framework/webmvc/web/</guid>
      <description> Spring WebMVC面试题  ⬅️BACK-Spring FrameWork面试题目录
  Spring WebMVC面试题  SpringMVC的运行原理和启动流程是什么样子的 DispatchServlet初始化过程 SpringMVC中的Controller是单例还是多例，怎么保证并发的安全   SpringMVC的运行原理和启动流程是什么样子的 # 启动流程 - servlet容器启动(如Tomcat)，加载配置,即web.xml,后来可以使用ServletContainerInitializer接口来 - web.xml中定义了listener，filter，servlet都会被初始化 - web.xml中配置了DispatcherServlet，此时便会加载 - 初始化DispatcherServlet的时候，会初始化出springMVC容器(webApplicationContext) # 运行原理 - 请求到达servlet容器的时候，转给DispatcherServlet - 请求到达DispatchServlet，根据请求的相关信息到HandlerMapping中查找到具体的Handler(Controller) - Controller调用具体的业务逻辑后将结果返给DispatcherServlet，最后返给客户端  DispatchServlet初始化过程 ## 初始化过程 - 初始化WebApplicationContext(调用父类FrameworkServlet的方法) -  SpringMVC中的Controller是单例还是多例，怎么保证并发的安全 ## 单例还是多例 - spring中的bean默认是单例 ## 安全并发 - 修改bean的作用域为request  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/test/jmeter/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/test/jmeter/0menu/</guid>
      <description> Jmeter面试题  Jmeter面试题  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/interview/docs/test/theory/0menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/interview/docs/test/theory/0menu/</guid>
      <description> 测试理论  测试理论  </description>
    </item>
    
  </channel>
</rss>